geometry = TRUE,
year = 2019)
# import libraries
library(tidycensus)
library(tidyverse)
library(ggplot2)
# API key
census_api_key("d760130070a378a58bdfa9c0a540526b9903f963")
vars <-   c("B02001_001", # population total race
"B02001_002", # white alone
"B02001_003", # Black or African American alone
"B02001_004", # American Indian and Alaska Native alone
"B03002_012", # Estimate!!Total:!!Hispanic or Latino: HISPANIC OR LATINO ORIGIN BY RACE
"B19049_001", # Estimate!!Median household income in the past 12 months (in 2019 inflation-adjusted dollars) --!!Total:
"C17002_002", # RATIO OF INCOME TO POVERTY LEVEL IN THE PAST 12 MONTHS Estimate!!Total:!!Under .50
"C17002_003") #Estimate!!Total:!!.50 to .99 RATIO OF INCOME TO POVERTY LEVEL IN THE PAST 12 MONTHS
data_2022 <- get_acs(survey = "acs5",
geography = "county",
#state = STATECODE,
variables = "B03002_012",
geometry = TRUE,
year = 2019)
View(data_2022)
vars <-   c("B02001_001", # population total race
"B02001_002", # white alone
"B02001_003", # Black or African American alone
"B02001_004", # American Indian and Alaska Native alone
"B03002_012", # Estimate!!Total:!!Hispanic or Latino: HISPANIC OR LATINO ORIGIN BY RACE
"B19049_001", # Estimate!!Median household income in the past 12 months (in 2019 inflation-adjusted dollars) --!!Total:
"C17002_002", # RATIO OF INCOME TO POVERTY LEVEL IN THE PAST 12 MONTHS Estimate!!Total:!!Under .50
"C17002_003") #Estimate!!Total:!!.50 to .99 RATIO OF INCOME TO POVERTY LEVEL IN THE PAST 12 MONTHS
data_2022 <- get_acs(survey = "acs5",
geography = "county",
#state = STATECODE,
variables = "B03002_012",
geometry = TRUE,
year = 2022)
vars <-   c("B02001_001", # population total race
"B02001_002", # white alone
"B02001_003", # Black or African American alone
"B02001_004", # American Indian and Alaska Native alone
"B03002_012", # Estimate!!Total:!!Hispanic or Latino: HISPANIC OR LATINO ORIGIN BY RACE
"B19049_001", # Estimate!!Median household income in the past 12 months (in 2019 inflation-adjusted dollars) --!!Total:
"C17002_002", # RATIO OF INCOME TO POVERTY LEVEL IN THE PAST 12 MONTHS Estimate!!Total:!!Under .50
"C17002_003") #Estimate!!Total:!!.50 to .99 RATIO OF INCOME TO POVERTY LEVEL IN THE PAST 12 MONTHS
data_2022 <- get_acs(survey = "acs5",
geography = "county",
#state = STATECODE,
variables = "B03002_012",
geometry = TRUE,
year = 2021)
vars <-   c("B02001_001", # population total race
"B02001_002", # white alone
"B02001_003", # Black or African American alone
"B02001_004", # American Indian and Alaska Native alone
"B03002_012", # Estimate!!Total:!!Hispanic or Latino: HISPANIC OR LATINO ORIGIN BY RACE
"B19049_001", # Estimate!!Median household income in the past 12 months (in 2019 inflation-adjusted dollars) --!!Total:
"C17002_002", # RATIO OF INCOME TO POVERTY LEVEL IN THE PAST 12 MONTHS Estimate!!Total:!!Under .50
"C17002_003") #Estimate!!Total:!!.50 to .99 RATIO OF INCOME TO POVERTY LEVEL IN THE PAST 12 MONTHS
data_2022 <- get_acs(survey = "acs5",
geography = "county",
#state = STATECODE,
variables = "B03002_012",
geometry = TRUE,
year = 2022)
vars <-   c("B02001_001", # population total race
"B02001_002", # white alone
"B02001_003", # Black or African American alone
"B02001_004", # American Indian and Alaska Native alone
"B03002_012", # Estimate!!Total:!!Hispanic or Latino: HISPANIC OR LATINO ORIGIN BY RACE
"B19049_001", # Estimate!!Median household income in the past 12 months (in 2019 inflation-adjusted dollars) --!!Total:
"C17002_002", # RATIO OF INCOME TO POVERTY LEVEL IN THE PAST 12 MONTHS Estimate!!Total:!!Under .50
"C17002_003") #Estimate!!Total:!!.50 to .99 RATIO OF INCOME TO POVERTY LEVEL IN THE PAST 12 MONTHS
data_2022 <- get_acs(survey = "acs5",
geography = "county",
#state = STATECODE,
variables = "B03002_012",
geometry = TRUE,
year = 2021)
vars <-   c("B02001_001", # population total race
"B02001_002", # white alone
"B02001_003", # Black or African American alone
"B02001_004", # American Indian and Alaska Native alone
"B03002_012", # Estimate!!Total:!!Hispanic or Latino: HISPANIC OR LATINO ORIGIN BY RACE
"B19049_001", # Estimate!!Median household income in the past 12 months (in 2019 inflation-adjusted dollars) --!!Total:
"C17002_002", # RATIO OF INCOME TO POVERTY LEVEL IN THE PAST 12 MONTHS Estimate!!Total:!!Under .50
"C17002_003") #Estimate!!Total:!!.50 to .99 RATIO OF INCOME TO POVERTY LEVEL IN THE PAST 12 MONTHS
data_2022 <- get_acs(survey = "acs5",
geography = "county",
#state = STATECODE,
variables = vars,
geometry = TRUE,
year = 2021)
View(data_2022)
head(data_2022)
vars <-   c("B02001_001", # population total race
"B02001_002", # white alone
"B02001_003", # Black or African American alone
"B02001_004", # American Indian and Alaska Native alone
"B03002_012", # Estimate!!Total:!!Hispanic or Latino: HISPANIC OR LATINO ORIGIN BY RACE
"B19049_001", # Estimate!!Median household income in the past 12 months (in 2019 inflation-adjusted dollars) --!!Total:
"C17002_002", # RATIO OF INCOME TO POVERTY LEVEL IN THE PAST 12 MONTHS Estimate!!Total:!!Under .50
"C17002_003") #Estimate!!Total:!!.50 to .99 RATIO OF INCOME TO POVERTY LEVEL IN THE PAST 12 MONTHS
data_2021 <- get_acs(survey = "acs5",
geography = "county",
#state = STATECODE,
variables = vars,
geometry = TRUE,
year = 2021)
data_2021 <- data_2021 %>%
pivot_wider(names_from = variable, values_from = estimate)
View(data_2021)
data_2021 <- data_2021 %>%
pivot_wider(names_from = "variable", values_from = "estimate")
View(data_2021)
data_2020 <- get_acs(survey = "acs5",
geography = "county",
#state = STATECODE,
variables = vars,
geometry = TRUE,
year = 2020)
data_2019 <- get_acs(survey = "acs5",
geography = "county",
#state = STATECODE,
variables = vars,
geometry = TRUE,
year = 2019)
data_2018 <- get_acs(survey = "acs5",
geography = "county",
#state = STATECODE,
variables = vars,
geometry = TRUE,
year = 2018)
data_2017 <- get_acs(survey = "acs5",
geography = "county",
#state = STATECODE,
variables = vars,
geometry = TRUE,
year = 2017)
View(data_2017)
vars <-   c("B02001_001", # population total race
"B02001_002", # white alone
"B02001_003", # Black or African American alone
"B02001_004", # American Indian and Alaska Native alone
"B03002_012", # Estimate!!Total:!!Hispanic or Latino: HISPANIC OR LATINO ORIGIN BY RACE
"B19049_001", # Estimate!!Median household income in the past 12 months (in 2019 inflation-adjusted dollars) --!!Total:
"C17002_002", # RATIO OF INCOME TO POVERTY LEVEL IN THE PAST 12 MONTHS Estimate!!Total:!!Under .50
"C17002_003") #Estimate!!Total:!!.50 to .99 RATIO OF INCOME TO POVERTY LEVEL IN THE PAST 12 MONTHS
data_2021 <- get_acs(survey = "acs5",
geography = "county",
#state = STATECODE,
variables = vars,
geometry = TRUE,
year = 2021)
data_2021 <- data_2021 %>%
mutate(acs = "2016-2021")
data_2020 <- data_2020 %>%
mutate(acs = "2015-2020")
data_2019 <- data_2019 %>%
mutate(acs = "2014-2019")
data_2018 <- data_2018 %>%
mutate(acs = "2013-2018")
data_2017 <- data_2017 %>%
mutate(acs = "2012-2017")
View(data_2021)
combined_data <- bind_rows(data_2021, data_2020, data_2019, data_2018, data_2017)
getwd()
combined_data <- bind_rows(data_2021, data_2020, data_2019, data_2018, data_2017)
write.csv(combined_data, "../../data/raw/acs_5_raw.csv")
View(data_2018)
write.csv(combined_data, "../../data/raw/acs/acs_5_raw.csv", row.names = FALSE)
View(combined_data)
View(combined_data)
head(combined_data)
View(combined_data)
View(combined_data)
write.csv(combined_data, "../../data/raw/acs/acs_5_raw.csv")
head(combined_data)
str(combined_data)
combined_data.geometry
combined_data$ geometry
head(combined_data$geometry, 5)
print(combined_dataa$geometry[1])
print(combined_data$geometry[1])
library(sf)
# extract bounding boxes for each geometry
bbox_list <- lapply(combined_data$geometry, st_bbox)
# convert the list of bounding boxes to a dataframe
df <- do.call(rbind, bbox_list)
# assign the bounding box values to new columns in your dataframe
df$xmin <- bbox_df[, "xmin"]
library(sf)
# extract bounding boxes for each geometry
bbox_list <- lapply(combined_data$geometry, st_bbox)
# convert the list of bounding boxes to a dataframe
df <- do.call(rbind, bbox_list)
# assign the bounding box values to new columns in your dataframe
df$xmin <- df[, "xmin"]
df$ymin <- df[, "ymin"]
library(sf)
# Extract bounding boxes for each geometry
bbox_list <- lapply(combined_data$geometry, st_bbox)
# Convert the list of bounding boxes to a dataframe
df <- as.data.frame(do.call(rbind, bbox_list))
# Assign the bounding box values to new columns in your dataframe
combined_data$xmin <- df$xmin
combined_data$ymin <- df$ymin
combined_data$xmax <- df$xmax
combined_data$ymax <- df$ymax
View(combined_data)
View(combined_data)
View(df)
combined_data$geometry <- NULL
write.csv(combined_data, "../../data/raw/acs/acs_5_raw.csv")
View(combined_data)
View(combined_data)
combined_dataa <- bind_rows(data_2021, data_2020, data_2019, data_2018, data_2017)
View(combined_data)
View(combined_dataa)
library(fredr)
api.key = "90c777432f754129f7ca266e2ea35aab" # import API library and set API key
fredr_set_key(api.key)
unemp_df <- as.data.frame(fredr(  # get data on unemployment rate
series_id = "UNRATE",
observation_start = as.Date("1990-01-01"),
observation_end = as.Date("2023-10-01"),
frequency = "q"
))
#write.csv(unemp_df, "../../data/raw-data/Fredapi_raw_unemployment.csv")
unemp_df
View(unemp_df)
library(tidyverse)
flight_delays = read.csv("FlightDelays.csv",stringsAsFactors=FALSE)
head(flight_delays)
ggplot(flight_delays, aes(x=Delay, fill=Carrier)) + geom_density(alpha=0.4)+
labs(title = "Density Plot of Delay Length in Minutes by Flight Carrier",
x= "Delay Length in Minutes",
y = "Density of Delay Length in Minutes") +theme_minimal()
ggplot(flight_delays, aes(x=Delay, fill=Carrier)) + geom_density(alpha=0.4)+
labs(title = "Density Plot of Delay Length in Minutes by Flight Carrier",
x= "Delay Length in Minutes",
y = "Density of Delay Length in Minutes")
ggplot(flight_delays,aes(x=Carrier, y=Delay, fill=Carrier)) + geom_boxplot() +
labs(title = "Boxplot of Delay Length in Minutes by Flight Carrier",
x = "Carrier",
y = "Delay Length in Minutes")
UA = flight_delays$FlightLength[flight_delays$Carrier=='UA']
AA = flight_delays$FlightLength[flight_delays$Carrier=='AA']
N <- 10000
len_UA = length(UA)
len_AA = length(AA)
UA_boot = replicate(N,mean(sample(UA,len_UA,replace=T)))
AA_boot = replicate(N,mean(sample(AA,len_AA,replace=T)))
par(mfrow=c(1,2))
hist(UA_boot,breaks=50,prob=T)
hist(AA_boot,breaks=50,prob=T)
par(mfrow=c(1,1))
ratio_boot = UA_boot/ AA_boot
hist(ratio_boot,breaks=50,prob=T)
quantile(ratio_boot,c(.025,0.975))
Titanic = read.csv("Titanic.csv",stringsAsFactors=FALSE)
head(Titanic)
ggplot(flight_delays, aes(x=Delay, fill=Carrier)) + geom_density(alpha=0.4)+
labs(title = "Density Plot of Delay Length in Minutes by Flight Carrier",
x= "Delay Length in Minutes",
y = "Density of Delay Length in Minutes")
ggplot(flight_delays,aes(x=Carrier, y=Delay, fill=Carrier)) + geom_boxplot() +
labs(title = "Boxplot of Delay Length in Minutes by Flight Carrier",
x = "Carrier",
y = "Delay Length in Minutes")
UA = flight_delays$FlightLength[flight_delays$Carrier=='UA']
AA = flight_delays$FlightLength[flight_delays$Carrier=='AA']
N <- 10000
num_ua_flights = length(UA)
num_aa_flights = length(AA)
ua_bootstrap = replicate(N,mean(sample(UA,num_ua_flights,replace=T)))
aa_bootstrap = replicate(N,mean(sample(AA,num_aa_flights,replace=T)))
par(mfrow=c(1,2))
hist(ua_bootstrap,breaks=50,prob=T)
hist(aa_bootstrap,breaks=50,prob=T)
par(mfrow=c(1,1))
raio_means = ua_bootstrap/ aa_bootstrap
hist(raio_means,breaks=50,prob=T)
flight_delays = read.csv("FlightDelays.csv",stringsAsFactors=FALSE)
head(flight_delays)
ggplot(flight_delays, aes(x=Delay, fill=Carrier)) + geom_density(alpha=0.4)+
labs(title = "Density Plot of Delay Length in Minutes by Flight Carrier",
x= "Delay Length in Minutes",
y = "Density of Delay Length in Minutes")
ggplot(flight_delays,aes(x=Carrier, y=Delay, fill=Carrier)) + geom_boxplot() +
labs(title = "Boxplot of Delay Length in Minutes by Flight Carrier",
x = "Carrier",
y = "Delay Length in Minutes")
UA = flight_delays$FlightLength[flight_delays$Carrier=='UA']
AA = flight_delays$FlightLength[flight_delays$Carrier=='AA']
N <- 10000
num_ua_flights = length(UA)
num_aa_flights = length(AA)
ua_bootstrap = replicate(N,mean(sample(UA,num_ua_flights,replace=T)))
aa_bootstrap = replicate(N,mean(sample(AA,num_aa_flights,replace=T)))
par(mfrow=c(1,2))
hist(ua_bootstrap,breaks=50,prob=T)
hist(aa_bootstrap,breaks=50,prob=T)
par(mfrow=c(1,1))
ratio_means = ua_bootstrap/ aa_bootstrap
hist(ratio_means,breaks=50,prob=T)
quantile(ratio_means,c(.025,0.975))
boot_mean = mean(ratio_means)
boot_actual = mean(UA)/mean(AA)
estimate = boot_mean - boot_actual
estimate
Titanic = read.csv("Titanic.csv",stringsAsFactors=FALSE)
head(Titanic)
survivors = Titanic[Titanic$Survived ==1,]
victims = Titanic[Titanic$Survived == 0,]
N = 100000
age = numeric(N)
for(i in 1:N){
boot_s = mean(sample(survivors$Age, length(survivors$Age), replace = T))
boot_v = mean(sample(victims$Age, length(victims$Age), replace = T))
age[i] = boot_s - boot_v
}
head(age)
conf= quantile(age, c(0.05, 0.95))
conf
conf = quantile(age, c(0.025, 0.975))
conf
![img](/diagram.jpeg)
![img](./diagram.jpeg)
![img](diagram.jpeg)
![img](diagram.jpeg)
!(diagram.jpeg)
!(./diagram.jpeg)
!(/diagram.jpeg)
![unchanged image](diagram.jpeg)
![unchanged](diagram.jpeg)
![unchanged](/diagram.jpeg)
![unchanged](./diagram.jpeg)
knitr::include_graphics("diagram.jpeg")
(transition_matrix = matrix(c(1/4,3/10,2/5,1/20,0,
1/4,1/4,1/4,1/4,0,
7/20,3/10,1/4,1/10,0,
3/20,1/2,1/20,1/4,1/20,
0,0,0,0,1), ncol = 5, byrow = TRUE))
# since we monitor the move every 1 minute, t = 12 minutes
# Let i = 1 (jungle entry/checkpoint 1)
probP = function(jungle_game, n){
I <- 0*jungle_game
diag(I) <- 1  # make identity matrix
for (j in 1:n){
I <- I%*%jungle_game
}
return(I)
}
i=1
probP(mtransition_matrix,12)[i,5]
# since we monitor the move every 1 minute, t = 12 minutes
# Let i = 1 (jungle entry/checkpoint 1)
probP = function(jungle_game, n){
I <- 0*jungle_game
diag(I) <- 1  # make identity matrix
for (j in 1:n){
I <- I%*%jungle_game
}
return(I)
}
i=1
probP(transition_matrix,12)[i,5]
knitr::include_graphics("diagram.jpeg")
# import libraries
library(tidycensus)
library(tidyverse)
library(ggplot2)
# API key
census_api_key("d760130070a378a58bdfa9c0a540526b9903f963")
# import libraries
library(tidycensus)
library(tidyverse)
library(ggplot2)
# API key
census_api_key("d760130070a378a58bdfa9c0a540526b9903f963")
vars <-   c("B19001", # Household Income in the Past 12 Months
"B19013", # Median Household Income in the Past 12 Month
"B19025", # Aggregatee Househole Income in the Past 12 Months
"B25063", # Gross Rent
"B25064", # Median Gross Rent
"B25064", # Average Gross Rent
"B25065", # Aggregate Gross Rent
"B25077", # Median Value
"S1903")  # Median Income
vars <-   c(#"B19001", # Household Income in the Past 12 Months
"B19013", # Median Household Income in the Past 12 Month
#"B19025", # Aggregatee Househole Income in the Past 12 Months
#"B25063", # Gross Rent
"B25064", # Median Gross Rent
#"B25064", # Average Gross Rent
#"B25065", # Aggregate Gross Rent
"B25077") # Median Value
#"S1903")  # Median Income
years <- 2017:2021
data_list <- list()
for (year in years) {
data_list[[as.character(year)]] <- get_acs(survey = "acs5",
geography = "county",
#state = STATECODE,
variables = vars,
geometry = TRUE,
year = year)
}
vars <-   c(#"B19001", # Household Income in the Past 12 Months
"B19013", # Median Household Income in the Past 12 Month
#"B19025", # Aggregatee Househole Income in the Past 12 Months
#"B25063", # Gross Rent
"B25064", # Median Gross Rent
#"B25064", # Average Gross Rent
#"B25065", # Aggregate Gross Rent
"B25077") # Median Value
#"S1903")  # Median Income
years <- 2017:2021
data_list <- list()
for (year in years) {
data_list[[as.character(year)]] <- get_acs(survey = "acs5",
geography = "county",
#state = STATECODE,
variables = vars,
geometry = TRUE,
year = year)
}
data_2017 <- get_acs(survey = "acs5",
geography = "county",
#state = STATECODE,
variables = vars,
geometry = TRUE,
year = 2017)
vars <-   c(#"B19001", # Household Income in the Past 12 Months
"S1903", # Median Household Income in the Past 12 Months
#"B19025", # Aggregatee Househole Income in the Past 12 Months
#"B25063", # Gross Rent
"B25064", # Median Gross Rent
#"B25064", # Average Gross Rent
#"B25065", # Aggregate Gross Rent
"B25077") # Median Value
#"S1903")  # Median Income
years <- 2017:2021
data_list <- list()
for (year in years) {
data_list[[as.character(year)]] <- get_acs(survey = "acs5",
geography = "county",
#state = STATECODE,
variables = vars,
geometry = TRUE,
year = year)
}
years <- 2017:2021
data_list <- list()
for (year in years) {
data_list[[as.character(year)]] <- get_acs(survey = "acs5",
geography = "county",
#state = STATECODE,
variables = vars,
geometry = FALSE,
year = year)
}
data_2017 <- get_acs(survey = "acs5",
geography = "county",
#state = STATECODE,
variables = vars,
geometry = TRUE,
year = 2017)
data_2017 <- get_acs(survey = "acs5",
geography = "county",
#state = STATECODE,
variables = vars,
#geometry = TRUE,
year = 2017)
View(data_2017)
data_2017 <- get_acs(survey = "acs5",
geography = "county",
#state = STATECODE,
variables = "S1903",
#geometry = TRUE,
year = 2017)
# import libraries
library(tidycensus)
library(tidyverse)
library(ggplot2)
# API key
census_api_key("d760130070a378a58bdfa9c0a540526b9903f963")
data_2017 <- get_acs(survey = "acs5",
geography = "county",
#state = STATECODE,
variables = "S1903",
#geometry = TRUE,
year = 2017)
data_2017 <- get_acs(survey = "acs5",
geography = "county",
#state = STATECODE,
variables = "B25064",
#geometry = TRUE,
year = 2017)
data_2017 <- get_acs(survey = "acs5",
geography = "county",
#state = STATECODE,
variables = vars,
#geometry = TRUE,
year = 2017)
data_2017 <- get_acs(survey = "acs5",
geography = "county",
#state = STATECODE,
variables = "B25077",
#geometry = TRUE,
year = 2017)
