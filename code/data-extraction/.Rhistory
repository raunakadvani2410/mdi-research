# get data by census block group
vars <-   c("B02001_001", # population total race
"B02001_002", # white alone
"B02001_003", # Black or African American alone
"B02001_004", # American Indian and Alaska Native alone
"B03002_012", # Total:!!Hispanic or Latino: HISPANIC OR LATINO ORIGIN BY RACE
"B19049_001", # !Median household income  (in 2019 inflation-adjusted dollars)
"C17002_002", # RATIO OF INCOME TO POVERTY LEVEL IN THE PAST 12 MONTHS Under .50
"C17002_003") # .50 to .99 RATIO OF INCOME TO POVERTY LEVEL IN THE PAST 12 MONTHS
states = c('Kentucky', 'West Virginia', 'Louisiana', 'Massachusetts', 'Minnesota', 'Texas', 'Nevada', 'Wyoming', 'North Carolina', 'Connecticut', 'Tennessee', 'Michigan', 'Maryland', 'Wisconsin', 'Delaware', 'Virginia', 'North Dakota', 'Indiana', 'Utah', 'Rhode Island', 'Montana', 'Kansas', 'Vermont', 'Idaho', 'South Dakota', 'Oklahoma', 'Ohio', 'Alaska', 'Alabama', 'Iowa', 'Colorado', 'Arizona', 'California', 'Hawaii', 'Oregon', 'Washington', 'New Hampshire', 'Arkansas', 'District of Columbia', 'Missouri', 'Maine', 'New Jersey', 'Nebraska', 'Puerto Rico', 'Illinois', 'Florida', 'South Carolina', 'New Mexico', 'Mississippi', 'New York', 'Georgia', 'Pennsylvania')
data_2021 <- get_acs(survey = "acs5",
geography = "cbg",
state = states,
variables = vars,
geometry = TRUE,
year = 2021) # get as geojson
# import libraries
library(tidycensus)
library(tidyverse)
library(ggplot2)
# API key
census_api_key("d760130070a378a58bdfa9c0a540526b9903f963")
# get data by census block group
vars <-   c("B02001_001", # population total race
"B02001_002", # white alone
"B02001_003", # Black or African American alone
"B02001_004", # American Indian and Alaska Native alone
"B03002_012", # Total:!!Hispanic or Latino: HISPANIC OR LATINO ORIGIN BY RACE
"B19049_001", # !Median household income  (in 2019 inflation-adjusted dollars)
"C17002_002", # RATIO OF INCOME TO POVERTY LEVEL IN THE PAST 12 MONTHS Under .50
"C17002_003") # .50 to .99 RATIO OF INCOME TO POVERTY LEVEL IN THE PAST 12 MONTHS
states = c('Kentucky', 'West Virginia', 'Louisiana', 'Massachusetts', 'Minnesota', 'Texas', 'Nevada', 'Wyoming', 'North Carolina', 'Connecticut', 'Tennessee', 'Michigan', 'Maryland', 'Wisconsin', 'Delaware', 'Virginia', 'North Dakota', 'Indiana', 'Utah', 'Rhode Island', 'Montana', 'Kansas', 'Vermont', 'Idaho', 'South Dakota', 'Oklahoma', 'Ohio', 'Alaska', 'Alabama', 'Iowa', 'Colorado', 'Arizona', 'California', 'Hawaii', 'Oregon', 'Washington', 'New Hampshire', 'Arkansas', 'District of Columbia', 'Missouri', 'Maine', 'New Jersey', 'Nebraska', 'Puerto Rico', 'Illinois', 'Florida', 'South Carolina', 'New Mexico', 'Mississippi', 'New York', 'Georgia', 'Pennsylvania')
data_2021 <- get_acs(survey = "acs5",
geography = "cbg",
state = states,
variables = vars,
geometry = TRUE,
year = 2021) # get as geojson
View(data_2021)
# get data by census block group
vars <-   c("B02001_001", # population total race
"B02001_002", # white alone
"B02001_003", # Black or African American alone
"B02001_004", # American Indian and Alaska Native alone
"B03002_012", # Total:!!Hispanic or Latino: HISPANIC OR LATINO ORIGIN BY RACE
"B19049_001", # !Median household income  (in 2019 inflation-adjusted dollars)
"C17002_002", # RATIO OF INCOME TO POVERTY LEVEL IN THE PAST 12 MONTHS Under .50
"C17002_003") # .50 to .99 RATIO OF INCOME TO POVERTY LEVEL IN THE PAST 12 MONTHS
states = c('Kentucky', 'West Virginia', 'Louisiana', 'Massachusetts', 'Minnesota', 'Texas', 'Nevada', 'Wyoming', 'North Carolina', 'Connecticut', 'Tennessee', 'Michigan', 'Maryland', 'Wisconsin', 'Delaware', 'Virginia', 'North Dakota', 'Indiana', 'Utah', 'Rhode Island', 'Montana', 'Kansas', 'Vermont', 'Idaho', 'South Dakota', 'Oklahoma', 'Ohio', 'Alaska', 'Alabama', 'Iowa', 'Colorado', 'Arizona', 'California', 'Hawaii', 'Oregon', 'Washington', 'New Hampshire', 'Arkansas', 'District of Columbia', 'Missouri', 'Maine', 'New Jersey', 'Nebraska', 'Puerto Rico', 'Illinois', 'Florida', 'South Carolina', 'New Mexico', 'Mississippi', 'New York', 'Georgia', 'Pennsylvania')
years <- 2017:2021
data_list <- list()
for (year in years) {
data_list[[as.character(year)]] <- get_acs(survey = "acs5",
geography = "cbg",
state = states,
variables = vars,
geometry = TRUE,
year = year)
}
# Assigning individual dataframes
data_2017 <- data_list[["2017"]]
data_2018 <- data_list[["2018"]]
data_2019 <- data_list[["2019"]]
data_2020 <- data_list[["2020"]]
data_2021 <- data_list[["2021"]]
data_2021 <- data_2021 %>%
mutate(acs = "2016-2021")
data_2020 <- data_2020 %>%
mutate(acs = "2015-2020")
data_2019 <- data_2019 %>%
mutate(acs = "2014-2019")
data_2018 <- data_2018 %>%
mutate(acs = "2013-2018")
data_2017 <- data_2017 %>%
mutate(acs = "2012-2017")
combined_data <- bind_rows(data_2021, data_2020, data_2019, data_2018, data_2017)
library(sf)
# extract bounding boxes for each geometry
bbox_list <- lapply(combined_data$geometry, st_bbox)
# convert the list of bounding boxes to a dataframe
df <- as.data.frame(do.call(rbind, bbox_list))
# assign the bounding box values to new columns in your dataframe
combined_data$xmin <- df$xmin
combined_data$ymin <- df$ymin
combined_data$xmax <- df$xmax
combined_data$ymax <- df$ymax
combined_data$geometry <- NULL
write.csv(combined_data, "../../data/raw/acs/acs_raw_merged_cbg.csv")
library(Rspotify)
install.packages('Rspotify')
library(Rspotify)
library(httr)
library(jsonlite)
library(spotifyr)#spotifyr is an R wrapper for pulling track audio features and other information from Spotify’s Web API in bulk.
install.packages('spotifyr')
library(Rspotify)
library(httr)
library(jsonlite)
library(spotifyr)#spotifyr is an R wrapper for pulling track audio features and other information from Spotify’s Web API in bulk.
my_token <- get_spotify_api_token(client_id = "YOUR KEY",
client_secret = "YOUR KEY") # you have to register and get your keys
library(Rspotify)
library(httr)
library(jsonlite)
library(spotifyr)#spotifyr is an R wrapper for pulling track audio features and other information from Spotify’s Web API in bulk.
my_token <- get_spotify_api_token(client_id = "f24079b82c1e4bce84960f88da697aeb",
client_secret = "bc9fbb940a974ac0970cf500f96776e4") # you have to register and get your keys
library(Rspotify)
library(httr)
library(jsonlite)
library(spotifyr)#spotifyr is an R wrapper for pulling track audio features and other information from Spotify’s Web API in bulk.
my_token <- get_spotify_api_token(client_id = "f24079b82c1e4bce84960f88da697aeb",
client_secret = "bc9fbb940a974ac0970cf500f96776e4") # you have to register and get your keys
library(httr)
library(jsonlite)
library(spotifyr)
library(dplyr)
df <- read.csv('Artists.csv')
df_filtered <- df %>%
select('artist_name', 'speechiness')
df_filtered <- df_filtered[data_filtered$artist_name != 'Beyoncé' , ] # remove Beyonce
library(httr)
library(jsonlite)
library(spotifyr)
library(dplyr)
df <- read.csv('Artists.csv')
df_filtered <- df %>%
select('artist_name', 'speechiness')
df_filtered <- df_filtered[dffiltered$artist_name != 'Beyoncé' , ] # remove Beyonce
library(httr)
library(jsonlite)
library(spotifyr)
library(dplyr)
df <- read.csv('Artists.csv')
df_filtered <- df %>%
select('artist_name', 'speechiness')
df_filtered <- df_filtered[df_filtered$artist_name != 'Beyoncé' , ] # remove Beyonce
boxplot(speechiness ~ artist_name, data = df_filtered)
t.test(speechiness ~ artist_name, data = data_filtered,alternative = "less")
t.test(speechiness ~ artist_name, data = df_filtered,alternative = "less")
# bootstrap
N <- 10000
speechiness_john_legend <- data_filtered[data_filtered$artist_name == 'John Legend',]$speechiness
# bootstrap
N <- 10000
speechiness_john_legend <- df_filtered[data_filtered$artist_name == 'John Legend',]$speechiness
# bootstrap
N <- 10000
speechiness_john_legend <- df_filtered[df_filtered$artist_name == 'John Legend',]$speechiness
speechiness_taylor_swift <- df_filtered[df_filtered$artist_name == 'Taylor Swift',]$speechiness
n.jl <- length(speechiness_john_legend)
n.ts <- length(speechiness_taylor_swift)
bootstrap_john_legend <- replicate(N,mean(sample(speechiness_john_legend , n.jl , replace = T)))
bootstrap_taylor_swift <- replicate(N,mean(sample(speechiness_taylor_swift , n.ts , replace = T)))
mean_ratio <- bootstrap_john_legend/bootstrap_taylor_swift
quantile(mean_ratio, c(0.025, 0.975))
mean(mean_ratio) - mean(speechiness_john_legend)/mean(speechiness_taylor_swift)
df['Valence_C'] <- NA
df$Valence_C <- ifelse((df$Valence > 0.8) & (df$Valence < 1) , "more positive",
ifelse((df$Valence > 0.5) & (df$Valence < 0.79) , "Moderate",
ifelse((df$Valence > 0) & (df$Valence < 0.49) , "more negative",
NA  ))) # all other values map to NA
df_filtered2 <- df[df$artist_name != 'Beyoncé' , ]
(A <- table(df_filtered2$artist_name, data_filtered2$Valence_C))
(A <- table(df_filtered2$artist_name, df_filtered2$Valence_C))
r <- rowSums(A)
c <- colSums(A)
N = sum(A)
(expected <- round(outer(r,c)/N,2))
chisq.test(A)
# import libraries
library(tidycensus)
library(tidyverse)
library(ggplot2)
# API key
census_api_key("d760130070a378a58bdfa9c0a540526b9903f963")
# get data by census tract
vars <-   c("B02001_001", # population total race
"B02001_002", # white alone
"B02001_003", # Black or African American alone
"B02001_004", # American Indian and Alaska Native alone
"B03002_012", # Total:!!Hispanic or Latino: HISPANIC OR LATINO ORIGIN BY RACE
"B19049_001", # !Median household income  (in 2019 inflation-adjusted dollars)
"C17002_002", # RATIO OF INCOME TO POVERTY LEVEL IN THE PAST 12 MONTHS Under .50
"C17002_003") # .50 to .99 RATIO OF INCOME TO POVERTY LEVEL IN THE PAST 12 MONTHS
states = c('Kentucky', 'West Virginia', 'Louisiana', 'Massachusetts', 'Minnesota', 'Texas', 'Nevada', 'Wyoming', 'North Carolina', 'Connecticut', 'Tennessee', 'Michigan', 'Maryland', 'Wisconsin', 'Delaware', 'Virginia', 'North Dakota', 'Indiana', 'Utah', 'Rhode Island', 'Montana', 'Kansas', 'Vermont', 'Idaho', 'South Dakota', 'Oklahoma', 'Ohio', 'Alaska', 'Alabama', 'Iowa', 'Colorado', 'Arizona', 'California', 'Hawaii', 'Oregon', 'Washington', 'New Hampshire', 'Arkansas', 'District of Columbia', 'Missouri', 'Maine', 'New Jersey', 'Nebraska', 'Puerto Rico', 'Illinois', 'Florida', 'South Carolina', 'New Mexico', 'Mississippi', 'New York', 'Georgia', 'Pennsylvania')
years <- 2017:2021
data_list <- list()
for (year in years) {
data_list[[as.character(year)]] <- get_acs(survey = "acs5",
geography = "tract",
state = states,
variables = vars,
geometry = TRUE,
year = year)
}
# Assigning individual dataframes
data_2017 <- data_list[["2017"]]
data_2018 <- data_list[["2018"]]
data_2019 <- data_list[["2019"]]
data_2020 <- data_list[["2020"]]
data_2021 <- data_list[["2021"]]
data_2021 <- data_2021 %>%
mutate(acs = "2016-2021")
data_2020 <- data_2020 %>%
mutate(acs = "2015-2020")
data_2019 <- data_2019 %>%
mutate(acs = "2014-2019")
data_2018 <- data_2018 %>%
mutate(acs = "2013-2018")
data_2017 <- data_2017 %>%
mutate(acs = "2012-2017")
combined_data <- bind_rows(data_2021, data_2020, data_2019, data_2018, data_2017)
library(sf)
# extract bounding boxes for each geometry
bbox_list <- lapply(combined_data$geometry, st_bbox)
# convert the list of bounding boxes to a dataframe
df <- as.data.frame(do.call(rbind, bbox_list))
# assign the bounding box values to new columns in your dataframe
combined_data$xmin <- df$xmin
combined_data$ymin <- df$ymin
combined_data$xmax <- df$xmax
combined_data$ymax <- df$ymax
combined_data$geometry <- NULL
write.csv(combined_data, "../../data/raw/acs/acs_raw_merged_tract.csv")
