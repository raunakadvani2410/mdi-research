---
title: 'American Community Survey Data Extraction'
author: "Raunak Advani"
format: 
  html: 
    embed-resources: true
---

## Extracting ACS data using the `tidycensus` package

```{r}
# import libraries
library(tidycensus)
library(tidyverse)
library(ggplot2)
```

```{r}
# API key
census_api_key("d760130070a378a58bdfa9c0a540526b9903f963")
```

```{r}
# get data by census tract

vars <-   c("B02001_001", # population total race
            "B02001_002", # white alone
            "B02001_003", # Black or African American alone
            "B02001_004", # American Indian and Alaska Native alone
            "B03002_012", # Total:!!Hispanic or Latino: HISPANIC OR LATINO ORIGIN BY RACE
            "B19049_001", # !Median household income  (in 2019 inflation-adjusted dollars) 
            "C17002_002", # RATIO OF INCOME TO POVERTY LEVEL IN THE PAST 12 MONTHS Under .50
            "C17002_003") # .50 to .99 RATIO OF INCOME TO POVERTY LEVEL IN THE PAST 12 MONTHS

states = c('Kentucky', 'West Virginia', 'Louisiana', 'Massachusetts', 'Minnesota', 'Texas', 'Nevada', 'Wyoming', 'North Carolina', 'Connecticut', 'Tennessee', 'Michigan', 'Maryland', 'Wisconsin', 'Delaware', 'Virginia', 'North Dakota', 'Indiana', 'Utah', 'Rhode Island', 'Montana', 'Kansas', 'Vermont', 'Idaho', 'South Dakota', 'Oklahoma', 'Ohio', 'Alaska', 'Alabama', 'Iowa', 'Colorado', 'Arizona', 'California', 'Hawaii', 'Oregon', 'Washington', 'New Hampshire', 'Arkansas', 'District of Columbia', 'Missouri', 'Maine', 'New Jersey', 'Nebraska', 'Puerto Rico', 'Illinois', 'Florida', 'South Carolina', 'New Mexico', 'Mississippi', 'New York', 'Georgia', 'Pennsylvania')
```

```{r}
years <- 2017:2021
data_list <- list()

for (year in years) {
  data_list[[as.character(year)]] <- get_acs(survey = "acs5",
                                             geography = "tract",
                                             state = states,
                                             variables = vars, 
                                             geometry = TRUE, 
                                             year = year)
}

# Assigning individual dataframes
data_2017 <- data_list[["2017"]]
data_2018 <- data_list[["2018"]]
data_2019 <- data_list[["2019"]]
data_2020 <- data_list[["2020"]]
data_2021 <- data_list[["2021"]]
```

```{r}
data_2021 <- data_2021 %>%
  mutate(acs = "2016-2021")

data_2020 <- data_2020 %>%
  mutate(acs = "2015-2020")

data_2019 <- data_2019 %>%
  mutate(acs = "2014-2019")

data_2018 <- data_2018 %>%
  mutate(acs = "2013-2018")

data_2017 <- data_2017 %>%
  mutate(acs = "2012-2017")

combined_data <- bind_rows(data_2021, data_2020, data_2019, data_2018, data_2017)
```

```{r}
library(sf)

# extract bounding boxes for each geometry
bbox_list <- lapply(combined_data$geometry, st_bbox)

# convert the list of bounding boxes to a dataframe
df <- as.data.frame(do.call(rbind, bbox_list))

# assign the bounding box values to new columns in your dataframe
combined_data$xmin <- df$xmin
combined_data$ymin <- df$ymin
combined_data$xmax <- df$xmax
combined_data$ymax <- df$ymax

combined_data$geometry <- NULL
write.csv(combined_data, "../../data/raw/acs/acs_raw_merged_tract.csv")
```

```{r}
vars <-   c("B02001_001", # population total race
  "B02001_002", # white alone
  "B02001_003", # Black or African American alone
  "B02001_004", # American Indian and Alaska Native alone
  "B03002_012", # Estimate!!Total:!!Hispanic or Latino: HISPANIC OR LATINO ORIGIN BY RACE
  "B19049_001", # Estimate!!Median household income in the past 12 months (in 2019 inflation-adjusted dollars) --!!Total:
  "C17002_002", # RATIO OF INCOME TO POVERTY LEVEL IN THE PAST 12 MONTHS Estimate!!Total:!!Under .50
  "C17002_003") #Estimate!!Total:!!.50 to .99 RATIO OF INCOME TO POVERTY LEVEL IN THE PAST 12 MONTHS

data_2021 <- get_acs(survey = "acs5",
              geography = "county",
              #state = STATECODE,
              variables = vars, 
              geometry = TRUE, 
              year = 2021) # get as geojson
```

```{r}
data_2020 <- get_acs(survey = "acs5",
              geography = "county",
              #state = STATECODE,
              variables = vars, 
              geometry = TRUE, 
              year = 2020)
```

```{r}
data_2019 <- get_acs(survey = "acs5",
              geography = "county",
              #state = STATECODE,
              variables = vars, 
              geometry = TRUE, 
              year = 2019)
```

```{r}
data_2018 <- get_acs(survey = "acs5",
              geography = "county",
              #state = STATECODE,
              variables = vars, 
              geometry = TRUE, 
              year = 2018)
```

```{r}
data_2017 <- get_acs(survey = "acs5",
              geography = "county",
              #state = STATECODE,
              variables = vars, 
              geometry = TRUE, 
              year = 2017)
```

```{r}
head(data_2021)
```

```{r}
data_2021 <- data_2021 %>%
  mutate(acs = "2016-2021")

data_2020 <- data_2020 %>%
  mutate(acs = "2015-2020")

data_2019 <- data_2019 %>%
  mutate(acs = "2014-2019")

data_2018 <- data_2018 %>%
  mutate(acs = "2013-2018")

data_2017 <- data_2017 %>%
  mutate(acs = "2012-2017")

```

```{r}
combined_dataa <- bind_rows(data_2021, data_2020, data_2019, data_2018, data_2017)
```

```{r}
head(combined_data)
```

```{r}
str(combined_data)
```

```{r}
combined_data$ geometry
```

```{r}
library(sf)

# extract bounding boxes for each geometry
bbox_list <- lapply(combined_data$geometry, st_bbox)

# convert the list of bounding boxes to a dataframe
df <- as.data.frame(do.call(rbind, bbox_list))

# assign the bounding box values to new columns in your dataframe
combined_data$xmin <- df$xmin
combined_data$ymin <- df$ymin
combined_data$xmax <- df$xmax
combined_data$ymax <- df$ymax


```

```{r}
combined_data$geometry <- NULL
```

```{r}
write.csv(combined_data, "../../data/raw/acs/acs_5_raw.csv")
```
